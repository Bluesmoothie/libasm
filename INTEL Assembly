mov x, y	//copie y dans x (peut etre un registre, une addresse ou une constante)
lea	x, [y]	//charge l'addresse de y dans x

add x, y	//Ajoute y a x
sub	x, y	//Soustrait y a x

cmp	x, y	//Compare y a x en les soustrayant, met les flags pour les jumps
test x, y	//Compare y a x en faisant un ET //
test x, x est vrai si x == NULL (mieux que cmp x, 0)

je x		//Jump a l'etiquette x si flag ZF = 1
test x, x
je y		//Saute a y si x == NULL
jne x		//Jump a l'etiquette x si flag ZF = 0
jmp x		//Jump toujours

push x		//Pousse le registre sur la pile
pop x		//Inverse

call x		//Apelle la fonction x
ret x		//return

syscall		//Appel systeme

and or xor

flags

ZF zero flag (1 si le resultat est 0)
SF sign flag (1 si le resultat < 0)
CF carry flag (1 si debordement dans add ou sub)
OF overflow flag
PF parity flag (1 si pair)
AF auxiliary flag (oui)

set par les test et cmp et utilise par les jumps pour choisir si on saute ou pas